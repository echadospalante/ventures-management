generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String             @id @default(cuid())
  picture             String
  email               String             @unique
  firstName           String
  lastName            String
  active              Boolean            @default(true)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @default(now()) @updatedAt
  onboardingCompleted Boolean            @default(false)
  verified            Boolean            @default(false)
  contactId           String?            @unique
  detailId            String?            @unique
  contact             UserContact?       @relation(fields: [contactId], references: [id])
  detail              UserDetail?        @relation(fields: [detailId], references: [id])
  XUserPreferences    XUserPreferences[]
  XUserRoles          XUserRoles[]
  preferences         VentureCategory[]  @relation("XUserPreferences")
  roles               Role[]             @relation("XUserRoles")
}

model UserDetail {
  id             String                @id @default(cuid())
  gender         String
  birthDate      DateTime
  municipalityId Int
  donations      EventDonation[]
  notifications  Notification[]
  claps          PublicationClap[]
  comments       PublicationComment[]
  user           User?
  municipality   Municipality          @relation(fields: [municipalityId], references: [id])
  ventures       Venture[]
  sponsorships   VentureSponsorship[]
  subscriptions  VentureSubscription[]
}

model UserContact {
  id           String   @id @default(cuid())
  phoneNumber  String
  address      String
  facebookUrl  String
  linkedinUrl  String
  twitterUrl   String
  instagramUrl String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  user         User?
}

model XUserPreferences {
  userId          String
  categoryId      String
  ventureCategory VentureCategory @relation(fields: [categoryId], references: [id])
  user            User            @relation(fields: [userId], references: [id])

  @@id([userId, categoryId])
}

model Department {
  id             Int            @id @default(autoincrement())
  name           String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now()) @updatedAt
  municipalities Municipality[]
}

model Municipality {
  id           Int          @id @default(autoincrement())
  name         String
  departmentId Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now()) @updatedAt
  department   Department   @relation(fields: [departmentId], references: [id])
  userDetails  UserDetail[]
}

model PublicationComment {
  id                 String             @id @default(cuid())
  authorDetailId     String
  publicationId      String
  body               String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @default(now()) @updatedAt
  User               UserDetail         @relation(fields: [authorDetailId], references: [id])
  venturePublication VenturePublication @relation(fields: [publicationId], references: [id])
}

model EventCategory {
  id             String           @id @default(cuid())
  name           String           @unique
  slug           String           @unique
  description    String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  XEventCategory XEventCategory[]
  ventureEvent   VentureEvent[]   @relation("XEventCategory")
}

model EventDonation {
  id            String       @id @default(cuid())
  eventId       String
  amount        Float
  currency      String
  createdAt     DateTime     @default(now())
  donorDetailId String
  donor         UserDetail   @relation(fields: [donorDetailId], references: [id])
  event         VentureEvent @relation(fields: [eventId], references: [id])
}

model EventLocation {
  id          String        @id @default(cuid())
  lat         Float?
  lng         Float?
  description String?
  event       VentureEvent?
}

model VentureLocation {
  id          String   @id @default(cuid())
  lat         Float?
  lng         Float?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  venture     Venture?
}

model Notification {
  id           String             @id @default(cuid())
  title        String
  type         NotificationType
  status       NotificationStatus
  description  String
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @default(now()) @updatedAt
  userDetailId String
  user         UserDetail         @relation(fields: [userDetailId], references: [id])
}

model PublicationClap {
  id                 String             @id @default(cuid())
  publicationId      String
  createdAt          DateTime           @default(now())
  userDetailId       String
  venturePublication VenturePublication @relation(fields: [publicationId], references: [id])
  user               UserDetail         @relation(fields: [userDetailId], references: [id])
}

model PublicationContent {
  id                 String             @id @default(cuid())
  type               ContentType
  content            String
  publicationId      String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @default(now()) @updatedAt
  venturePublication VenturePublication @relation(fields: [publicationId], references: [id])
}

model Role {
  id         String       @id @default(cuid())
  name       AppRole      @unique
  label      String       @default("")
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now()) @updatedAt
  XUserRoles XUserRoles[]
  users      User[]       @relation("XUserRoles")
}

model Venture {
  id                      String                    @id @default(cuid())
  name                    String
  slug                    String                    @unique
  coverPhoto              String
  description             String
  active                  Boolean                   @default(true)
  verified                Boolean                   @default(false)
  detailId                String                    @unique
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @default(now()) @updatedAt
  locationId              String                    @unique
  ownerDetailId           String
  ventureId               String                    @unique
  detail                  VentureDetail             @relation(fields: [detailId], references: [id])
  location                VentureLocation           @relation(fields: [locationId], references: [id])
  ownerDetail             UserDetail                @relation(fields: [ownerDetailId], references: [id])
  contact                 VentureContact            @relation(fields: [ventureId], references: [id])
  XVentureVencureCategory XVentureVencureCategory[]
  categories              VentureCategory[]         @relation("XVentureVencureCategory")
}

model VentureContact {
  id          String   @id @default(cuid())
  email       String
  phoneNumber String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  venture     Venture?
}

model XVentureVencureCategory {
  ventureId  String
  categoryId String
  category   VentureCategory @relation(fields: [categoryId], references: [id])
  venture    Venture         @relation(fields: [ventureId], references: [id])

  @@id([ventureId, categoryId])
}

model VentureCategory {
  id                      String                    @id @default(cuid())
  name                    String
  slug                    String                    @unique
  description             String
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @default(now()) @updatedAt
  XUserPreferences        XUserPreferences[]
  XVentureVencureCategory XVentureVencureCategory[]
  users                   User[]                    @relation("XUserPreferences")
  ventures                Venture[]                 @relation("XVentureVencureCategory")
}

model VentureDetail {
  id            String                @id @default(cuid())
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @default(now()) @updatedAt
  venture       Venture?
  events        VentureEvent[]
  publications  VenturePublication[]
  sponsorships  VentureSponsorship[]
  subscriptions VentureSubscription[]
}

model VentureEvent {
  id             String           @id @default(cuid())
  title          String
  description    String
  coverPhoto     String
  ventureId      String
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  locationId     String           @unique
  donations      EventDonation[]
  location       EventLocation    @relation(fields: [locationId], references: [id])
  ventureDetail  VentureDetail    @relation(fields: [ventureId], references: [id])
  XEventCategory XEventCategory[]
  EventCategory  EventCategory[]  @relation("XEventCategory")
}

model VenturePublication {
  id          String               @id @default(cuid())
  description String
  type        PublicationType
  clapsCount  Int
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @default(now()) @updatedAt
  detailId    String
  claps       PublicationClap[]
  comments    PublicationComment[]
  contents    PublicationContent[]
  detail      VentureDetail        @relation(fields: [detailId], references: [id])
}

model VentureSponsorship {
  id              String        @id @default(cuid())
  ventureDetailId String
  monthlyAmount   Float
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt
  sponsorDetailId String
  user            UserDetail    @relation(fields: [sponsorDetailId], references: [id])
  detail          VentureDetail @relation(fields: [ventureDetailId], references: [id])
}

model VentureSubscription {
  id                 String        @id @default(cuid())
  ventureId          String
  createdAt          DateTime      @default(now())
  subscriberDetailId String
  user               UserDetail    @relation(fields: [subscriberDetailId], references: [id])
  detail             VentureDetail @relation(fields: [ventureId], references: [id])
}

model XEventCategory {
  eventId    String
  categoryId String
  category   EventCategory @relation(fields: [categoryId], references: [id])
  event      VentureEvent  @relation(fields: [eventId], references: [id])

  @@id([eventId, categoryId])
}

model XUserRoles {
  id        String   @id
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  role      Role     @relation(fields: [roleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

enum AppRole {
  ADMIN
  USER
  MODERATOR
  NEWS_WRITER
}

enum ContentType {
  TEXT
  IMAGE
  VIDEOf
  ANNOUNCEMENT
  ACHIEVEMENT
}

enum NotificationStatus {
  READ
  UNREAD
}

enum NotificationType {
  WELCOME
  REGISTER_COMPLETED
  ACCOUNT_VERIFIED
  ACCOUNT_UNVERIFIED
  ACCOUNT_LOCKED
  ACCOUNT_UNLOCKED
  LOGIN
  NEW_SUBSCRIPTION
  NEW_SPONSOR
  NEW_DONATION
  NEW_COMMENT
}

enum PublicationType {
  STANDARD
  ANNOUNCEMENT
  ACHIEVEMENT
  PROMOTION
  BEHIND_THE_SCENES
}
